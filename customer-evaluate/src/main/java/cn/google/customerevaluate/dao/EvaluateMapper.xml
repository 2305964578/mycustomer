<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.google.customerevaluate.dao.EvaluateMapper">
  <resultMap id="BaseResultMap" type="cn.google.customerevaluate.model.Evaluate">
    <id column="evaluate_id" jdbcType="INTEGER" property="evaluateId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="evaluate_user_name" jdbcType="VARCHAR" property="evaluateUserName" />
    <result column="evaluate_time" jdbcType="VARCHAR" property="evaluateTime" />
    <result column="evaluate_content" jdbcType="VARCHAR" property="evaluateContent" />
  </resultMap>
  <sql id="Base_Column_List">
    evaluate_id, user_id, evaluate_user_name, evaluate_time, evaluate_content
  </sql>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from evaluate
    where evaluate_id = #{evaluateId,jdbcType=INTEGER}
  </select>

  <select id="selectByUserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from evaluate
    where user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectByUserName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from evaluate
    where evaluate_user_name = #{evaluateUserName,jdbcType=INTEGER}
  </select>

  <select id="selectByEvaluateTime" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from evaluate
    where evaluate_time = #{evaluateTime,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from evaluate
    where evaluate_id = #{evaluateId,jdbcType=INTEGER}
  </delete>

  <insert id="insert" parameterType="cn.google.customerevaluate.model.Evaluate">
    insert into evaluate (user_id, evaluate_user_name,
      evaluate_time, evaluate_content)
    values (#{userId,jdbcType=INTEGER}, #{evaluateUserName,jdbcType=VARCHAR},
      #{evaluateTime,jdbcType=VARCHAR}, #{evaluateContent,jdbcType=VARCHAR})
  </insert>

  <insert id="insertSelective" parameterType="cn.google.customerevaluate.model.Evaluate">
    insert into evaluate
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="evaluateId != null">
        evaluate_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="evaluateUserName != null">
        evaluate_user_name,
      </if>
      <if test="evaluateTime != null">
        evaluate_time,
      </if>
      <if test="evaluateContent != null">
        evaluate_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="evaluateId != null">
        #{evaluateId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="evaluateUserName != null">
        #{evaluateUserName,jdbcType=VARCHAR},
      </if>
      <if test="evaluateTime != null">
        #{evaluateTime,jdbcType=VARCHAR},
      </if>
      <if test="evaluateContent != null">
        #{evaluateContent,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="cn.google.customerevaluate.model.Evaluate">
    update evaluate
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="evaluateUserName != null">
        evaluate_user_name = #{evaluateUserName,jdbcType=VARCHAR},
      </if>
      <if test="evaluateTime != null">
        evaluate_time = #{evaluateTime,jdbcType=VARCHAR},
      </if>
      <if test="evaluateContent != null">
        evaluate_content = #{evaluateContent,jdbcType=VARCHAR},
      </if>
    </set>
    where evaluate_id = #{evaluateId,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="cn.google.customerevaluate.model.Evaluate">
    update evaluate
    set user_id = #{userId,jdbcType=INTEGER},
      evaluate_user_name = #{evaluateUserName,jdbcType=VARCHAR},
      evaluate_time = #{evaluateTime,jdbcType=VARCHAR},
      evaluate_content = #{evaluateContent,jdbcType=VARCHAR}
    where evaluate_id = #{evaluateId,jdbcType=INTEGER}
  </update>
</mapper>